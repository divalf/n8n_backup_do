{
  "createdAt": "2025-02-02T21:02:27.567Z",
  "updatedAt": "2025-02-02T21:03:57.137Z",
  "id": "SLPoTsI7lZdldUYk",
  "name": "Dashboard V1.0",
  "active": false,
  "nodes": [
    {
      "parameters": {
        "path": "dashboard/chats",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        60,
        120
      ],
      "id": "6161a449-bb58-4bb3-9a52-3f2cb74bb37c",
      "name": "Webhook",
      "webhookId": "86bf8454-4613-4d85-a461-6cbaaa8e52be",
      "credentials": {
        "httpHeaderAuth": {
          "id": "YXr7eKy7abzLW8Iu",
          "name": "Header Auth - AO"
        }
      }
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"chats\": {{ JSON.stringify($json.chats) }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        940,
        120
      ],
      "id": "44f564b9-1d80-44be-b365-0dacda03aedb",
      "name": "Respond to Webhook"
    },
    {
      "parameters": {
        "content": "Config",
        "height": 240
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        260,
        60
      ],
      "id": "d41276ec-79bc-4ef1-b4ea-3bd840c1eeb4",
      "name": "Sticky Note"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "228fd736-37df-481f-a6f1-05c45c559d8e",
              "name": "intanceId",
              "value": "16079feb-8a83-493e-866f-e6b146b0d655",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        320,
        120
      ],
      "id": "4beb8ee7-5700-4e03-b6a7-fe455419a241",
      "name": "config"
    },
    {
      "parameters": {
        "operation": "select",
        "schema": {
          "__rl": true,
          "value": "public",
          "mode": "list",
          "cachedResultName": "public"
        },
        "table": {
          "__rl": true,
          "value": "Chat",
          "mode": "list",
          "cachedResultName": "Chat"
        },
        "limit": 150,
        "where": {
          "values": [
            {
              "column": "instanceId",
              "value": "={{ $json.intanceId }}"
            }
          ]
        },
        "sort": {
          "values": [
            {
              "column": "updatedAt",
              "direction": "DESC"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        540,
        120
      ],
      "id": "fe8de120-c4a2-46f7-b2e4-29101b4a2ca4",
      "name": "Postgres",
      "alwaysOutputData": true,
      "credentials": {
        "postgres": {
          "id": "mgxUJp91OulKSJZt",
          "name": "Postgres - BlackSB"
        }
      }
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "chats",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        740,
        120
      ],
      "id": "00cb9298-a1f3-4339-a6a7-092159e9dcbf",
      "name": "Aggregate"
    },
    {
      "parameters": {
        "content": "## Get chats",
        "height": 360,
        "width": 1200,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        0
      ],
      "id": "67db3ec2-f662-4592-bba3-b1cb3e12ea7d",
      "name": "Sticky Note1"
    },
    {
      "parameters": {
        "path": "dashboard/chats/messages",
        "authentication": "headerAuth",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        60,
        560
      ],
      "id": "a8f51af4-7dc1-4dc8-825d-e79265f151ed",
      "name": "Webhook1",
      "webhookId": "86bf8454-4613-4d85-a461-6cbaaa8e52be"
    },
    {
      "parameters": {
        "respondWith": "json",
        "responseBody": "={\n  \"chats\": {{ JSON.stringify($json.chats) }}\n}",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        940,
        560
      ],
      "id": "8284d5c5-67f0-49ee-848e-fa2d6ebae187",
      "name": "Respond to Webhook1"
    },
    {
      "parameters": {
        "content": "Config",
        "height": 240
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        260,
        500
      ],
      "id": "c31fb964-2fff-4178-8765-f96da9a3b5a0",
      "name": "Sticky Note2"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "228fd736-37df-481f-a6f1-05c45c559d8e",
              "name": "intanceId",
              "value": "16079feb-8a83-493e-866f-e6b146b0d655",
              "type": "string"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        320,
        560
      ],
      "id": "8e912899-5cb3-4bd3-ab2f-fdb2cd5a49ac",
      "name": "config1"
    },
    {
      "parameters": {
        "aggregate": "aggregateAllItemData",
        "destinationFieldName": "chats",
        "options": {}
      },
      "type": "n8n-nodes-base.aggregate",
      "typeVersion": 1,
      "position": [
        740,
        560
      ],
      "id": "62a7e248-254d-44c1-88e2-fc780aa4c96b",
      "name": "Aggregate1"
    },
    {
      "parameters": {
        "content": "## Get messages by chatId",
        "height": 360,
        "width": 1200,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        440
      ],
      "id": "20674620-e68c-4e60-8c6a-152d6a88a9f2",
      "name": "Sticky Note3"
    },
    {
      "parameters": {
        "operation": "executeQuery",
        "query": "SELECT \n   \"id\",\n   \"pushName\",\n   \"message\",\n   \"messageTimestamp\",\n   \"status\",\n    \"key\"\nFROM public.\"Message\"\nWHERE \"instanceId\" = '{{ $json.intanceId }}'\nAND \"messageType\" = 'conversation'\nAND key->>'remoteJid' = '{{ $('Webhook1').item.json.query.remoteJid }}'\nORDER BY \"messageTimestamp\" DESC\nLIMIT 50;",
        "options": {}
      },
      "type": "n8n-nodes-base.postgres",
      "typeVersion": 2.5,
      "position": [
        540,
        560
      ],
      "id": "0da152ed-8aa6-45ad-b267-33ac88e028a4",
      "name": "Postgres2",
      "credentials": {
        "postgres": {
          "id": "mgxUJp91OulKSJZt",
          "name": "Postgres - BlackSB"
        }
      }
    },
    {
      "parameters": {
        "content": "## Rodar HTML",
        "height": 360,
        "width": 480,
        "color": 4
      },
      "type": "n8n-nodes-base.stickyNote",
      "typeVersion": 1,
      "position": [
        0,
        880
      ],
      "id": "9cecb1c4-e361-449c-8bba-e91f39cc08bf",
      "name": "Sticky Note4"
    },
    {
      "parameters": {
        "path": "dashboard",
        "responseMode": "responseNode",
        "options": {}
      },
      "type": "n8n-nodes-base.webhook",
      "typeVersion": 2,
      "position": [
        60,
        1020
      ],
      "id": "7b6f24b6-881a-4012-a0a9-77fb3a76b89f",
      "name": "Webhook2",
      "webhookId": "86bf8454-4613-4d85-a461-6cbaaa8e52be"
    },
    {
      "parameters": {
        "respondWith": "text",
        "responseBody": "<!DOCTYPE html>\n<html lang=\"en\">\n    <head>\n        <meta charset=\"UTF-8\">\n        <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n        <title>WhatsApp Web Clone</title>\n        <script src=\"https://cdnjs.cloudflare.com/ajax/libs/jquery/3.7.1/jquery.min.js\"></script>\n        <style>\n            * {\n                margin: 0;\n                padding: 0;\n                box-sizing: border-box;\n                font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif;\n            }\n    \n            body {\n                display: flex;\n                height: 100vh;\n                background-color: #d4d8d4;\n            }\n    \n            .sidebar {\n                width: 30%;\n                background-color: #ffffff;\n                border-right: 1px solid #e1e1e1;\n                display: flex;\n                flex-direction: column;\n            }\n    \n            .header {\n                padding: 10px 16px;\n                background-color: #f0f2f5;\n                display: flex;\n                align-items: center;\n                height: 60px;\n            }\n    \n            .chat-list {\n                flex: 1;\n                overflow-y: auto;\n            }\n    \n            .chat-item {\n                padding: 12px 16px;\n                display: flex;\n                align-items: center;\n                border-bottom: 1px solid #f0f2f5;\n                cursor: pointer;\n            }\n    \n            .chat-item:hover {\n                background-color: #f5f6f6;\n            }\n    \n            .chat-item.active {\n                background-color: #e9ebeb;\n                border-left: 5px solid #00a884;\n                padding-left: 11px; /* 16px - 5px to compensate for border */\n            }\n            \n            .chat-item {\n                position: relative;\n                padding: 12px 16px;\n                display: flex;\n                align-items: center;\n                border-bottom: 1px solid #f0f2f5;\n                cursor: pointer;\n                transition: all 0.2s ease;\n            }\n    \n            .chat-item:hover {\n                background-color: #f5f6f6;\n            }\n    \n            .avatar {\n                min-width: 49px;\n                width: 49px;\n                height: 49px;\n                border-radius: 50%;\n                background-color: #dfe5e7;\n                margin-right: 12px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                color: #54656f;\n                font-size: 20px;\n                flex-shrink: 0;\n            }\n    \n            .chat-info {\n                flex: 1;\n                min-width: 0; /* Enables text truncation in flex items */\n            }\n    \n            .chat-item .chat-header {\n                display: flex;\n                justify-content: space-between;\n                margin-bottom: 4px;\n                background: none;\n                padding: 0;\n                height: auto;\n            }\n    \n            .main-chat .chat-header {\n                padding: 10px 16px;\n                background-color: #f0f2f5;\n                display: flex;\n                align-items: center;\n                height: 60px;\n                width: 100%;\n            }\n    \n            .chat-name {\n                font-weight: 500;\n                color: #111b21;\n                overflow: hidden;\n                text-overflow: ellipsis;\n                white-space: nowrap;\n            }\n    \n            .chat-time {\n                font-size: 12px;\n                color: #667781;\n                flex-shrink: 0;\n                margin-left: 6px;\n            }\n    \n            .chat-last-message {\n                color: #667781;\n                font-size: 14px;\n                white-space: nowrap;\n                overflow: hidden;\n                text-overflow: ellipsis;\n            }\n    \n            .passcode-section {\n                padding: 16px;\n                background-color: #f0f2f5;\n                border-top: 1px solid #e1e1e1;\n            }\n    \n            .passcode-input {\n                width: 100%;\n                padding: 8px 12px;\n                border: 1px solid #e1e1e1;\n                border-radius: 8px;\n                font-size: 14px;\n                color: #111b21;\n                background-color: white;\n            }\n    \n            .passcode-input:focus {\n                outline: none;\n                border-color: #00a884;\n            }\n    \n            .save-passcode {\n                width: 100%;\n                padding: 8px;\n                margin-top: 8px;\n                background-color: #00a884;\n                border: none;\n                border-radius: 8px;\n                color: white;\n                font-size: 14px;\n                cursor: pointer;\n                transition: background-color 0.2s;\n            }\n    \n            .save-passcode:hover {\n                background-color: #008f72;\n            }\n    \n            .save-passcode:disabled {\n                background-color: #7fc7b9;\n                cursor: not-allowed;\n            }\n    \n            .main-chat {\n                flex: 1;\n                display: flex;\n                flex-direction: column;\n                background-color: #efeae2;\n            }\n    \n            .chat-messages {\n                flex: 1;\n                padding: 20px;\n                overflow-y: auto;\n                display: flex;\n                flex-direction: column;\n            }\n    \n            .message {\n                max-width: 65%;\n                padding: 6px 7px 8px 9px;\n                border-radius: 7.5px;\n                margin-bottom: 12px;\n                position: relative;\n                word-wrap: break-word;\n            }\n    \n            .message.received {\n                background-color: #ffffff;\n                align-self: flex-start;\n                border-top-left-radius: 0;\n            }\n    \n            .message.sent {\n                background-color: #d9fdd3;\n                align-self: flex-end;\n                border-top-right-radius: 0;\n                margin-left: auto;\n            }\n    \n            .message-text {\n                font-size: 14.2px;\n                line-height: 19px;\n                color: #111b21;\n            }\n    \n            .message-info {\n                display: flex;\n                justify-content: flex-end;\n                align-items: center;\n                gap: 4px;\n                margin-top: 2px;\n            }\n    \n            .message-time {\n                font-size: 11px;\n                color: #667781;\n            }\n    \n            .message-status {\n                font-size: 11px;\n                color: #667781;\n                text-transform: lowercase;\n            }\n    \n            .chat-input {\n                padding: 10px;\n                background-color: #f0f2f5;\n                display: flex;\n                align-items: center;\n            }\n    \n            .chat-input input {\n                flex: 1;\n                padding: 9px 12px;\n                border: none;\n                border-radius: 8px;\n                margin: 0 8px;\n                font-size: 15px;\n                background-color: #ffffff;\n            }\n    \n            .chat-input input:focus {\n                outline: none;\n            }\n    \n            /* Message bubble tail styling */\n            .message::before {\n                content: \"\";\n                position: absolute;\n                top: 0;\n                width: 12px;\n                height: 12px;\n            }\n    \n            .message.received::before {\n                left: -6px;\n                background: radial-gradient(circle at top left, transparent 12px, #ffffff 0);\n            }\n    \n            .message.sent::before {\n                right: -6px;\n                background: radial-gradient(circle at top right, transparent 12px, #d9fdd3 0);\n            }\n    \n            /* Add styles for unread messages badge */\n            .unread-badge {\n                background-color: #25d366;\n                color: white;\n                border-radius: 50%;\n                min-width: 20px;\n                height: 20px;\n                display: flex;\n                align-items: center;\n                justify-content: center;\n                font-size: 12px;\n                margin-left: 8px;\n                padding: 0 6px;\n            }\n        </style>\n    </head>\n<body>\n    <div class=\"sidebar\">\n        <div class=\"header\">\n            <div class=\"avatar\">P</div>\n        </div>\n        <div class=\"chat-list\" id=\"chatList\">\n            <!-- Chat list items will be populated by JavaScript -->\n        </div>\n        <div class=\"passcode-section\">\n            <input type=\"password\" \n                   class=\"passcode-input\" \n                   id=\"passcodeInput\" \n                   placeholder=\"Enter API Passcode\"\n                   maxlength=\"32\">\n            <button class=\"save-passcode\" id=\"savePasscode\">Save Passcode</button>\n        </div>\n    </div>\n    <!-- Rest of the previous HTML remains the same -->\n    <div class=\"main-chat\">\n        <div class=\"chat-header\">\n            <div class=\"avatar\" id=\"currentChatAvatar\">?</div>\n            <div class=\"chat-info\">\n                <div class=\"chat-name\" id=\"currentChatName\">Select a chat</div>\n            </div>\n        </div>\n        <div class=\"chat-messages\" id=\"chatMessages\">\n            <!-- Messages will be populated by JavaScript -->\n        </div>\n        <div class=\"chat-input\">\n            <input type=\"text\" placeholder=\"Type a message\" id=\"messageInput\">\n        </div>\n    </div>\n\n    <!-- Previous HTML remains the same -->\n<!-- Previous HTML remains the same -->\n<!-- Previous HTML remains the same -->\n<script>\n    let chats = [];\n    let chatHistory = {};\n    let apiPasscode = localStorage.getItem('apiPasscode') || '';\n    let currentChatId = localStorage.getItem('selectedChatId') || null;\n    let currentRemoteJid = localStorage.getItem('selectedRemoteJid') || null;\n\n    // Function to format phone number for display\n    function formatPhoneNumber(remoteJid) {\n        return remoteJid.replace('@s.whatsapp.net', '').replace(/\\D/g, '');\n    }\n\n    // Function to format Unix timestamp\n    function formatTimestamp(timestamp) {\n        const date = new Date(timestamp * 1000);\n        return date.toLocaleTimeString([], { \n            hour: '2-digit', \n            minute: '2-digit' \n        });\n    }\n\n    // Function to fetch chats from API\n    async function fetchChats() {\n    if (!apiPasscode) return;\n\n    try {\n        const response = await fetch('https://n8n.dinastia.uk/webhook/dashboard/chats', {\n            method: 'GET',\n            headers: {\n                'Authorization': apiPasscode\n            }\n        });\n\n        if (!response.ok) {\n            throw new Error('Failed to fetch chats');\n        }\n\n        const data = await response.json();\n        \n        // Transform API data to match our chat format\n        chats = data.chats.map(chat => ({\n            id: chat.id,\n            name: chat.name || formatPhoneNumber(chat.remoteJid),\n            lastMessage: \"Click to load messages\",\n            timestamp: new Date(chat.updatedAt).toLocaleTimeString([], { \n                hour: '2-digit', \n                minute: '2-digit'\n            }),\n            unreadMessages: chat.unreadMessages,\n            remoteJid: chat.remoteJid\n        }));\n\n        renderChatList();\n        \n        // Restore selected chat if it exists in the new chat list\n        if (currentChatId) {\n            const selectedChat = chats.find(c => c.id === currentChatId);\n            if (selectedChat) {\n                const chatElement = $(`.chat-item[data-chat-id=\"${currentChatId}\"]`);\n                chatElement.addClass('active');\n                updateChatHeader(currentChatId);\n                renderChatMessages(currentChatId, currentRemoteJid);\n            } else {\n                // Clear selection if chat no longer exists\n                currentChatId = null;\n                currentRemoteJid = null;\n                localStorage.removeItem('selectedChatId');\n                localStorage.removeItem('selectedRemoteJid');\n            }\n        }\n    } catch (error) {\n        console.error('Error fetching chats:', error);\n        alert('Failed to fetch chats. Please check your passcode.');\n    }\n}\n\n    // Function to fetch messages for a specific chat\n    async function fetchMessages(remoteJid) {\n        if (!apiPasscode) return;\n\n        try {\n            const response = await fetch(`https://n8n.dinastia.uk/webhook/dashboard/chats/messages?remoteJid=${encodeURIComponent(remoteJid)}`, {\n                method: 'GET',\n                headers: {\n                    'Authorization': apiPasscode\n                }\n            });\n\n            if (!response.ok) {\n                throw new Error('Failed to fetch messages');\n            }\n\n            const data = await response.json();\n            \n            // Transform API messages to match our format\n            return data.chats.map(msg => ({\n                id: msg.id,\n                username: msg.pushName || \"Unknown\",\n                text: msg.message.conversation || \"Empty message\",\n                timestamp: formatTimestamp(msg.messageTimestamp),\n                type: msg.key.fromMe ? \"sent\" : \"received\",\n                status: msg.status,\n                fromMe: msg.key.fromMe\n            }));\n        } catch (error) {\n            console.error('Error fetching messages:', error);\n            alert('Failed to fetch messages. Please try again.');\n            return [];\n        }\n    }\n\n    function renderChatList() {\n    const chatList = $('#chatList');\n    const previouslySelectedChatId = currentChatId; // Store the currently selected chat ID\n    chatList.empty();\n\n    chats.forEach(chat => {\n        const unreadBadge = chat.unreadMessages ? \n            `<span class=\"unread-badge\">${chat.unreadMessages}</span>` : '';\n\n        const chatItem = $(`\n            <div class=\"chat-item\" data-chat-id=\"${chat.id}\" data-remote-jid=\"${chat.remoteJid}\">\n                <div class=\"avatar\">${chat.name[0] || '?'}</div>\n                <div class=\"chat-info\">\n                    <div class=\"chat-header\">\n                        <span class=\"chat-name\">${chat.name || 'Unknown'}</span>\n                        <span class=\"chat-time\">${chat.timestamp}</span>\n                    </div>\n                    <div class=\"chat-last-message\">${chat.lastMessage}</div>\n                </div>\n                ${unreadBadge}\n            </div>\n        `);\n\n        // Reapply the 'active' class if this chat was previously selected\n        if (chat.id === previouslySelectedChatId) {\n            chatItem.addClass('active');\n        }\n\n        chatList.append(chatItem);\n    });\n}\n\n    async function renderChatMessages(chatId, remoteJid) {\n        const messagesContainer = $('#chatMessages');\n        messagesContainer.empty();\n        \n        // Show loading state\n        messagesContainer.append('<div class=\"loading\">Loading messages...</div>');\n\n        try {\n            // Fetch messages from API\n            const messages = await fetchMessages(remoteJid);\n            chatHistory[chatId] = messages;\n\n            // Clear loading state\n            messagesContainer.empty();\n\n            // Render messages\n            messages.forEach(message => {\n                const messageElement = $(`\n                    <div class=\"message ${message.type}\">\n                        <div class=\"message-text\">${message.text}</div>\n                        <div class=\"message-info\">\n                            <span class=\"message-time\">${message.timestamp}</span>\n                            ${message.fromMe ? `<span class=\"message-status\">${message.status}</span>` : ''}\n                        </div>\n                    </div>\n                `);\n\n                messagesContainer.append(messageElement);\n            });\n\n            // Update last message in chat list if we have messages\n            if (messages.length > 0) {\n                const lastMessage = messages[messages.length - 1];\n                const chatIndex = chats.findIndex(c => c.id === chatId);\n                if (chatIndex !== -1) {\n                    chats[chatIndex].lastMessage = lastMessage.text;\n                    chats[chatIndex].timestamp = lastMessage.timestamp;\n                    renderChatList();\n                }\n            }\n\n            // Scroll to bottom\n            messagesContainer.scrollTop(messagesContainer[0].scrollHeight);\n        } catch (error) {\n            messagesContainer.html('<div class=\"error\">Failed to load messages</div>');\n        }\n    }\n\n    function updateChatHeader(chatId) {\n        if (!chatId) return;\n\n        const chat = chats.find(c => c.id === chatId);\n        if (chat) {\n            $('#currentChatName').text(chat.name);\n            $('#currentChatAvatar').text(chat.name[0] || '?');\n        }\n    }\n\n    function handlePasscode() {\n        const passcodeInput = $('#passcodeInput');\n        const saveButton = $('#savePasscode');\n\n        if (apiPasscode) {\n            passcodeInput.val(apiPasscode);\n        }\n\n        saveButton.on('click', async function() {\n            const newPasscode = passcodeInput.val().trim();\n            if (newPasscode) {\n                apiPasscode = newPasscode;\n                localStorage.setItem('apiPasscode', apiPasscode);\n                await fetchChats();\n                alert('API Passcode saved successfully!');\n            } else {\n                alert('Please enter a valid passcode');\n            }\n        });\n\n        passcodeInput.on('input', function() {\n            saveButton.prop('disabled', !this.value.trim());\n        });\n\n        saveButton.prop('disabled', !passcodeInput.val().trim());\n    }\n\n    // Event handlers\n    $(document).ready(async function() {\n        handlePasscode();\n        \n        if (apiPasscode) {\n            await fetchChats();\n        } else {\n            renderChatList();\n        }\n\n        // Chat item click handler\n        $(document).on('click', '.chat-item', async function() {\n        const chatId = $(this).data('chat-id');\n        const remoteJid = $(this).data('remote-jid');\n        currentChatId = chatId;\n        currentRemoteJid = remoteJid;\n        \n        // Store selection in localStorage\n        localStorage.setItem('selectedChatId', chatId);\n        localStorage.setItem('selectedRemoteJid', remoteJid);\n\n        // Update UI\n        $('.chat-item').removeClass('active'); // Remove from all items first\n            $(this).addClass('active'); // Add class to the clicked item\n\n            // No need to call renderChatList() here, as it's called inside renderChatMessages()\n\n            updateChatHeader(chatId);\n            await renderChatMessages(chatId, remoteJid);\n    });\n\n        // Message input handler\n        $('#messageInput').on('keypress', function(e) {\n            if (e.which === 13 && currentChatId) {\n                const text = $(this).val().trim();\n                if (text) {\n                    const newMessage = {\n                        id: Date.now().toString(),\n                        username: \"Me\",\n                        text: text,\n                        timestamp: new Date().toLocaleTimeString([], { \n                            hour: '2-digit', \n                            minute: '2-digit' \n                        }),\n                        type: \"sent\"\n                    };\n\n                    if (!chatHistory[currentChatId]) {\n                        chatHistory[currentChatId] = [];\n                    }\n\n                    chatHistory[currentChatId].push(newMessage);\n\n                    const chatIndex = chats.findIndex(c => c.id === currentChatId);\n                    if (chatIndex !== -1) {\n                        chats[chatIndex].lastMessage = text;\n                        chats[chatIndex].timestamp = newMessage.timestamp;\n                    }\n\n                    $(this).val('');\n                    renderChatList();\n                    renderChatMessages(currentChatId, chats[chatIndex].remoteJid);\n                }\n            }\n        });\n    });\n</script>\n</body>\n</html>",
        "options": {}
      },
      "type": "n8n-nodes-base.respondToWebhook",
      "typeVersion": 1.1,
      "position": [
        280,
        1020
      ],
      "id": "f2f42878-c09b-4563-b7ff-a823501394d5",
      "name": "Respond to Webhook2"
    }
  ],
  "connections": {
    "Webhook": {
      "main": [
        [
          {
            "node": "config",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "config": {
      "main": [
        [
          {
            "node": "Postgres",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres": {
      "main": [
        [
          {
            "node": "Aggregate",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate": {
      "main": [
        [
          {
            "node": "Respond to Webhook",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook1": {
      "main": [
        [
          {
            "node": "config1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "config1": {
      "main": [
        [
          {
            "node": "Postgres2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Aggregate1": {
      "main": [
        [
          {
            "node": "Respond to Webhook1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Postgres2": {
      "main": [
        [
          {
            "node": "Aggregate1",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Webhook2": {
      "main": [
        [
          {
            "node": "Respond to Webhook2",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "settings": {
    "executionOrder": "v1"
  },
  "staticData": null,
  "meta": null,
  "pinData": {
    "Webhook": [
      {
        "json": {
          "headers": {
            "host": "n8n.dinastia.uk",
            "user-agent": "PostmanRuntime/7.43.0",
            "accept": "*/*",
            "accept-encoding": "gzip, deflate, br",
            "authorization": "ADWWADAW4684684684AWDAWD",
            "cache-control": "no-cache",
            "postman-token": "0d9af5ba-01e8-4639-b211-82bf92ad9fd9",
            "x-forwarded-for": "54.86.50.139",
            "x-forwarded-host": "n8n.dinastia.uk",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "9ba83ca7dbb8",
            "x-real-ip": "54.86.50.139"
          },
          "params": {},
          "query": {},
          "body": {},
          "webhookUrl": "https://n8n.dinastia.uk/webhook/dashboard/chats",
          "executionMode": "production"
        }
      }
    ],
    "Webhook1": [
      {
        "json": {
          "headers": {
            "host": "n8n.dinastia.uk",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36",
            "accept": "*/*",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "authorization": "ADWWADAW4684684684AWDAWD",
            "dnt": "1",
            "if-none-match": "W/\"ec3-XiLM9fF1kxLdD3PYjyhwY40ci6s\"",
            "origin": "null",
            "priority": "u=1, i",
            "sec-ch-ua": "\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"macOS\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            "x-forwarded-for": "5.64.198.82",
            "x-forwarded-host": "n8n.dinastia.uk",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "9ba83ca7dbb8",
            "x-real-ip": "5.64.198.82"
          },
          "params": {},
          "query": {
            "remoteJid": "447928821569@s.whatsapp.net"
          },
          "body": {},
          "webhookUrl": "https://n8n.dinastia.uk/webhook/dashboard/chats/messages",
          "executionMode": "production"
        }
      }
    ],
    "Webhook2": [
      {
        "json": {
          "headers": {
            "host": "n8n.dinastia.uk",
            "user-agent": "Mozilla/5.0 (Macintosh; Intel Mac OS X 10_15_7) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/132.0.0.0 Safari/537.36",
            "accept": "*/*",
            "accept-encoding": "gzip, deflate, br, zstd",
            "accept-language": "en-US,en;q=0.9",
            "authorization": "ADWWADAW4684684684AWDAWD",
            "dnt": "1",
            "if-none-match": "W/\"ec3-XiLM9fF1kxLdD3PYjyhwY40ci6s\"",
            "origin": "null",
            "priority": "u=1, i",
            "sec-ch-ua": "\"Not A(Brand\";v=\"8\", \"Chromium\";v=\"132\"",
            "sec-ch-ua-mobile": "?0",
            "sec-ch-ua-platform": "\"macOS\"",
            "sec-fetch-dest": "empty",
            "sec-fetch-mode": "cors",
            "sec-fetch-site": "cross-site",
            "x-forwarded-for": "5.64.198.82",
            "x-forwarded-host": "n8n.dinastia.uk",
            "x-forwarded-port": "443",
            "x-forwarded-proto": "https",
            "x-forwarded-server": "9ba83ca7dbb8",
            "x-real-ip": "5.64.198.82"
          },
          "params": {},
          "query": {
            "remoteJid": "447928821569@s.whatsapp.net"
          },
          "body": {},
          "webhookUrl": "https://n8n.dinastia.uk/webhook/dashboard/chats/messages",
          "executionMode": "production"
        }
      }
    ]
  },
  "versionId": "e90028a5-1f51-4114-9037-0ec293d6dff0",
  "triggerCount": 0,
  "tags": [
    {
      "createdAt": "2025-02-02T21:02:24.513Z",
      "updatedAt": "2025-02-02T21:02:24.513Z",
      "id": "1x61HrK7dY6v6pAt",
      "name": "Dash-v1.0"
    }
  ]
}